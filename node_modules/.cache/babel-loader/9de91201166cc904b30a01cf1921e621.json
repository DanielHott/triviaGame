{"ast":null,"code":"import { GET_TOKEN, USER_INFORMATION, USER_SCORE } from '../actions';\nconst INITIAL_STATE = {\n  player: [],\n  token: ''\n};\nexport default function login() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newPlayer;\n\n  switch (action.type) {\n    case USER_INFORMATION:\n      newPlayer = [...state.player];\n      newPlayer.push({\n        name: action.name,\n        email: action.email\n      });\n      return { ...state,\n        player: newPlayer\n      };\n\n    case GET_TOKEN:\n      return { ...state,\n        token: action.data\n      };\n\n    case USER_SCORE:\n      newPlayer;\n      return { ...state,\n        score: action.score\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/dh/projetos/sd-015-b-project-trivia-react-redux/src/redux/reducers/login.js"],"names":["GET_TOKEN","USER_INFORMATION","USER_SCORE","INITIAL_STATE","player","token","login","state","action","newPlayer","type","push","name","email","data","score"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,gBAApB,EAAsCC,UAAtC,QAAwD,YAAxD;AAEA,MAAMC,aAAa,GAAG;AAAEC,EAAAA,MAAM,EAAE,EAAV;AAAcC,EAAAA,KAAK,EAAE;AAArB,CAAtB;AAEA,eAAe,SAASC,KAAT,GAA8C;AAAA,MAA/BC,KAA+B,uEAAvBJ,aAAuB;AAAA,MAARK,MAAQ;AAC3D,MAAIC,SAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACA,SAAKT,gBAAL;AACEQ,MAAAA,SAAS,GAAG,CAAC,GAAGF,KAAK,CAACH,MAAV,CAAZ;AACAK,MAAAA,SAAS,CAACE,IAAV,CAAe;AACbC,QAAAA,IAAI,EAAEJ,MAAM,CAACI,IADA;AAEbC,QAAAA,KAAK,EAAEL,MAAM,CAACK;AAFD,OAAf;AAIA,aAAO,EAAE,GAAGN,KAAL;AAAYH,QAAAA,MAAM,EAAEK;AAApB,OAAP;;AACF,SAAKT,SAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACM;AAFT,OAAP;;AAIF,SAAKZ,UAAL;AACEO,MAAAA,SAAS;AACT,aAAO,EACL,GAAGF,KADE;AAELQ,QAAAA,KAAK,EAAEP,MAAM,CAACO;AAFT,OAAP;;AAIF;AACE,aAAOR,KAAP;AApBF;AAsBD","sourcesContent":["import { GET_TOKEN, USER_INFORMATION, USER_SCORE } from '../actions';\n\nconst INITIAL_STATE = { player: [], token: '' };\n\nexport default function login(state = INITIAL_STATE, action) {\n  let newPlayer;\n  switch (action.type) {\n  case USER_INFORMATION:\n    newPlayer = [...state.player];\n    newPlayer.push({\n      name: action.name,\n      email: action.email,\n    });\n    return { ...state, player: newPlayer };\n  case GET_TOKEN:\n    return {\n      ...state,\n      token: action.data,\n    };\n  case USER_SCORE:\n    newPlayer\n    return {\n      ...state,\n      score: action.score,\n    };\n  default:\n    return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}