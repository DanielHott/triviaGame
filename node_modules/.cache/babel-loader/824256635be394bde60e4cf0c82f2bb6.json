{"ast":null,"code":"var _jsxFileName = \"/home/dh/projetos/sd-015-b-project-trivia-react-redux/src/pages/game.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../component/Header';\nimport { setScore } from '../redux/actions';\nimport store from '../redux/store';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      category: '',\n      question: '',\n      correct: '',\n      incorrectAnswers: [],\n      time: 30,\n      isDisabled: false,\n      assertions: 0,\n      questionNumber: 0,\n      isButtonVisible: false\n    };\n    this.fetchApi = this.fetchApi.bind(this);\n    this.changeColor = this.changeColor.bind(this);\n    this.timer = this.timer.bind(this);\n    this.disabled = this.disabled.bind(this);\n    this.score = this.score.bind(this);\n    this.next = this.next.bind(this);\n    this.renderButtonNext = this.renderButtonNext.bind(this);\n    this.renderButtonsAlternatives = this.renderButtonsAlternatives.bind(this);\n    this.renderButtonIncorrect = this.renderButtonIncorrect.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      saveScore\n    } = this.props;\n    saveScore({\n      score: 0\n    });\n    this.fetchApi();\n    this.timer();\n    const {\n      player\n    } = store.getState().login;\n    const {\n      name,\n      gravatarEmail\n    } = player;\n    const user = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(user));\n  }\n\n  async fetchApi() {\n    const {\n      questionNumber\n    } = this.state;\n    const {\n      token\n    } = store.getState().login;\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = await response.json();\n    const correct = data.results[questionNumber].correct_answer;\n    const incorrect = data.results[questionNumber].incorrect_answers;\n    incorrect.push(correct);\n    incorrect.sort();\n    console.log(typeof incorrect);\n    const {\n      category,\n      question,\n      difficulty\n    } = data.results[questionNumber];\n    this.setState({\n      category,\n      question,\n      correct,\n      difficulty,\n      incorrectAnswers: [...incorrect]\n    });\n  }\n\n  changeColor() {\n    const wrongs = document.querySelectorAll('.wrong');\n    const correct = document.querySelector('.correct');\n    wrongs.forEach(element => {\n      element.style.border = '3px solid rgb(255, 0, 0)';\n    });\n    correct.style.border = '3px solid rgb(6, 240, 15)';\n    this.setState({\n      isButtonVisible: true\n    });\n  }\n\n  disabled() {\n    this.setState({\n      isDisabled: true\n    });\n    this.changeColor();\n  }\n\n  timer() {\n    const {\n      time\n    } = this.state;\n    const mil = 1000;\n\n    if (time !== 0) {\n      setInterval(() => {\n        this.setState(prevState => {\n          if (prevState.time > 0) {\n            return {\n              time: prevState.time - 1\n            };\n          }\n\n          this.disabled();\n        });\n      }, mil);\n    }\n  }\n\n  score() {\n    const {\n      saveScore\n    } = this.props;\n    const base = 10;\n    const {\n      difficulty,\n      time,\n      assertions\n    } = this.state;\n    const actAssertion = assertions + 1;\n    this.setState({\n      assertions: actAssertion\n    });\n    const levels = [0, 'easy', 'medium', 'hard'];\n    const {\n      player\n    } = store.getState().login;\n    const {\n      name,\n      gravatarEmail,\n      score\n    } = player;\n    const point = levels.indexOf(difficulty);\n    const points = base + time * point;\n    const somaPoints = points + score;\n    const user = {\n      player: {\n        name,\n        assertions: actAssertion,\n        score: somaPoints,\n        gravatarEmail\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(user));\n    saveScore({\n      score: somaPoints,\n      assertions: actAssertion\n    });\n  }\n\n  next() {\n    const {\n      questionNumber\n    } = this.state;\n    const {\n      history\n    } = this.props;\n    const four = 4;\n\n    if (questionNumber < four) {\n      const actNumber = questionNumber + 1;\n      this.setState({\n        questionNumber: actNumber,\n        isButtonVisible: false,\n        time: 30\n      });\n      this.fetchApi();\n    } else if (questionNumber === four) {\n      return history.push('/feedback');\n    }\n  }\n\n  renderButtonNext() {\n    const {\n      isButtonVisible\n    } = this.state;\n\n    if (isButtonVisible === true) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        \"data-testid\": \"btn-next\",\n        type: \"button\",\n        onClick: this.next,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, \"Pr\\xF3xima\");\n    }\n  }\n\n  renderButtonsAlternatives(correct, isDisabled) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      key: correct,\n      disabled: isDisabled,\n      id: \"correct-answer\",\n      onClick: () => {\n        this.changeColor();\n        this.score();\n      },\n      className: \"correct\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, correct);\n  }\n\n  renderButtonIncorrect(alternative, isDisabled, index) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      key: alternative,\n      disabled: isDisabled,\n      \"data-testid\": `wrong-answer-${index}`,\n      onClick: this.changeColor,\n      className: \"wrong\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }, alternative);\n  }\n\n  render() {\n    const {\n      incorrectAnswers,\n      correct,\n      question,\n      category,\n      time,\n      isDisabled,\n      isButtonVisible\n    } = this.state;\n    return incorrectAnswers.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, category), /*#__PURE__*/React.createElement(\"h4\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, question), incorrectAnswers.flatMap((alternative, index) => {\n      if (alternative === correct) {\n        return this.renderButtonsAlternatives(correct, isDisabled);\n      }\n\n      if (alternative !== correct) {\n        return this.renderButtonIncorrect(alternative, isDisabled, index);\n      }\n    }), isButtonVisible && this.renderButtonNext(), time)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, \"Loading\");\n  }\n\n}\n\nGame.propTypes = {\n  saveScore: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  saveScore: state => dispatch(setScore(state))\n});\n\nexport default connect(null, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/dh/projetos/sd-015-b-project-trivia-react-redux/src/pages/game.js"],"names":["React","PropTypes","connect","Header","setScore","store","Game","Component","constructor","state","category","question","correct","incorrectAnswers","time","isDisabled","assertions","questionNumber","isButtonVisible","fetchApi","bind","changeColor","timer","disabled","score","next","renderButtonNext","renderButtonsAlternatives","renderButtonIncorrect","componentDidMount","saveScore","props","player","getState","login","name","gravatarEmail","user","localStorage","setItem","JSON","stringify","token","response","fetch","data","json","results","correct_answer","incorrect","incorrect_answers","push","sort","console","log","difficulty","setState","wrongs","document","querySelectorAll","querySelector","forEach","element","style","border","mil","setInterval","prevState","base","actAssertion","levels","point","indexOf","points","somaPoints","history","four","actNumber","alternative","index","render","length","flatMap","propTypes","func","isRequired","shape","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,MAAMC,IAAN,SAAmBN,KAAK,CAACO,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,OAAO,EAAE,EAHE;AAIXC,MAAAA,gBAAgB,EAAE,EAJP;AAKXC,MAAAA,IAAI,EAAE,EALK;AAMXC,MAAAA,UAAU,EAAE,KAND;AAOXC,MAAAA,UAAU,EAAE,CAPD;AAQXC,MAAAA,cAAc,EAAE,CARL;AASXC,MAAAA,eAAe,EAAE;AATN,KAAb;AAYA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,KAAL,GAAa,KAAKA,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKG,QAAL,GAAgB,KAAKA,QAAL,CAAcH,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKI,KAAL,GAAa,KAAKA,KAAL,CAAWJ,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKK,IAAL,GAAY,KAAKA,IAAL,CAAUL,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKM,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBN,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKO,yBAAL,GAAiC,KAAKA,yBAAL,CAA+BP,IAA/B,CAAoC,IAApC,CAAjC;AACA,SAAKQ,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BR,IAA3B,CAAgC,IAAhC,CAA7B;AACD;;AAEDS,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAgB,KAAKC,KAA3B;AACAD,IAAAA,SAAS,CAAC;AAAEN,MAAAA,KAAK,EAAE;AAAT,KAAD,CAAT;AACA,SAAKL,QAAL;AACA,SAAKG,KAAL;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAa3B,KAAK,CAAC4B,QAAN,GAAiBC,KAApC;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAA0BJ,MAAhC;AACA,UAAMK,IAAI,GAAG;AAAEL,MAAAA,MAAM,EAAE;AACrBG,QAAAA,IADqB;AAErBnB,QAAAA,UAAU,EAAE,CAFS;AAGrBQ,QAAAA,KAAK,EAAE,CAHc;AAIrBY,QAAAA;AAJqB;AAAV,KAAb;AAMAE,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA9B;AACD;;AAEa,QAARlB,QAAQ,GAAG;AACf,UAAM;AAAEF,MAAAA;AAAF,QAAqB,KAAKR,KAAhC;AACA,UAAM;AAAEiC,MAAAA;AAAF,QAAYrC,KAAK,CAAC4B,QAAN,GAAiBC,KAAnC;AACA,UAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAE,8CAA6CF,KAAM,EAArD,CAA5B;AACA,UAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,UAAMlC,OAAO,GAAGiC,IAAI,CAACE,OAAL,CAAa9B,cAAb,EAA6B+B,cAA7C;AACA,UAAMC,SAAS,GAAGJ,IAAI,CAACE,OAAL,CAAa9B,cAAb,EAA6BiC,iBAA/C;AACAD,IAAAA,SAAS,CAACE,IAAV,CAAevC,OAAf;AACAqC,IAAAA,SAAS,CAACG,IAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOL,SAAnB;AACA,UAAM;AAAEvC,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsB4C,MAAAA;AAAtB,QAAqCV,IAAI,CAACE,OAAL,CAAa9B,cAAb,CAA3C;AACA,SAAKuC,QAAL,CAAc;AACZ9C,MAAAA,QADY;AAEZC,MAAAA,QAFY;AAGZC,MAAAA,OAHY;AAIZ2C,MAAAA,UAJY;AAKZ1C,MAAAA,gBAAgB,EAAE,CAAC,GAAGoC,SAAJ;AALN,KAAd;AAOD;;AAED5B,EAAAA,WAAW,GAAG;AACZ,UAAMoC,MAAM,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,QAA1B,CAAf;AACA,UAAM/C,OAAO,GAAG8C,QAAQ,CAACE,aAAT,CAAuB,UAAvB,CAAhB;AACAH,IAAAA,MAAM,CAACI,OAAP,CAAgBC,OAAD,IAAa;AAAEA,MAAAA,OAAO,CAACC,KAAR,CAAcC,MAAd,GAAuB,0BAAvB;AAAoD,KAAlF;AACApD,IAAAA,OAAO,CAACmD,KAAR,CAAcC,MAAd,GAAuB,2BAAvB;AACA,SAAKR,QAAL,CAAc;AAAEtC,MAAAA,eAAe,EAAE;AAAnB,KAAd;AACD;;AAEDK,EAAAA,QAAQ,GAAG;AACT,SAAKiC,QAAL,CAAc;AAAEzC,MAAAA,UAAU,EAAE;AAAd,KAAd;AACA,SAAKM,WAAL;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,UAAM;AAAER,MAAAA;AAAF,QAAW,KAAKL,KAAtB;AACA,UAAMwD,GAAG,GAAG,IAAZ;;AACA,QAAInD,IAAI,KAAK,CAAb,EAAgB;AACdoD,MAAAA,WAAW,CAAC,MAAM;AAChB,aAAKV,QAAL,CAAeW,SAAD,IAAe;AAC3B,cAAIA,SAAS,CAACrD,IAAV,GAAiB,CAArB,EAAwB;AACtB,mBAAQ;AAAEA,cAAAA,IAAI,EAAEqD,SAAS,CAACrD,IAAV,GAAiB;AAAzB,aAAR;AACD;;AAAC,eAAKS,QAAL;AACH,SAJD;AAKD,OANU,EAMR0C,GANQ,CAAX;AAOD;AACF;;AAEDzC,EAAAA,KAAK,GAAG;AACN,UAAM;AAAEM,MAAAA;AAAF,QAAgB,KAAKC,KAA3B;AACA,UAAMqC,IAAI,GAAG,EAAb;AACA,UAAM;AAAEb,MAAAA,UAAF;AAAczC,MAAAA,IAAd;AAAoBE,MAAAA;AAApB,QAAmC,KAAKP,KAA9C;AACA,UAAM4D,YAAY,GAAGrD,UAAU,GAAG,CAAlC;AACA,SAAKwC,QAAL,CAAc;AAAExC,MAAAA,UAAU,EAAEqD;AAAd,KAAd;AACA,UAAMC,MAAM,GAAG,CAAC,CAAD,EAAI,MAAJ,EAAY,QAAZ,EAAsB,MAAtB,CAAf;AACA,UAAM;AAAEtC,MAAAA;AAAF,QAAa3B,KAAK,CAAC4B,QAAN,GAAiBC,KAApC;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,aAAR;AAAuBZ,MAAAA;AAAvB,QAAiCQ,MAAvC;AACA,UAAMuC,KAAK,GAAGD,MAAM,CAACE,OAAP,CAAejB,UAAf,CAAd;AACA,UAAMkB,MAAM,GAAGL,IAAI,GAAItD,IAAI,GAAGyD,KAA9B;AACA,UAAMG,UAAU,GAAGD,MAAM,GAAGjD,KAA5B;AACA,UAAMa,IAAI,GAAG;AAAEL,MAAAA,MAAM,EAAE;AACrBG,QAAAA,IADqB;AAErBnB,QAAAA,UAAU,EAAEqD,YAFS;AAGrB7C,QAAAA,KAAK,EAAEkD,UAHc;AAIrBtC,QAAAA;AAJqB;AAAV,KAAb;AAMAE,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA9B;AACAP,IAAAA,SAAS,CAAC;AAAEN,MAAAA,KAAK,EAAEkD,UAAT;AAAqB1D,MAAAA,UAAU,EAAEqD;AAAjC,KAAD,CAAT;AACD;;AAED5C,EAAAA,IAAI,GAAG;AACL,UAAM;AAAER,MAAAA;AAAF,QAAqB,KAAKR,KAAhC;AACA,UAAM;AAAEkE,MAAAA;AAAF,QAAc,KAAK5C,KAAzB;AACA,UAAM6C,IAAI,GAAG,CAAb;;AACA,QAAI3D,cAAc,GAAG2D,IAArB,EAA2B;AACzB,YAAMC,SAAS,GAAG5D,cAAc,GAAG,CAAnC;AACA,WAAKuC,QAAL,CAAc;AAAEvC,QAAAA,cAAc,EAAE4D,SAAlB;AACZ3D,QAAAA,eAAe,EAAE,KADL;AAEZJ,QAAAA,IAAI,EAAE;AAFM,OAAd;AAGA,WAAKK,QAAL;AACD,KAND,MAMO,IAAIF,cAAc,KAAK2D,IAAvB,EAA6B;AAClC,aAAQD,OAAO,CAACxB,IAAR,CAAa,WAAb,CAAR;AACD;AACF;;AAEDzB,EAAAA,gBAAgB,GAAG;AACjB,UAAM;AAAER,MAAAA;AAAF,QAAsB,KAAKT,KAAjC;;AACA,QAAIS,eAAe,KAAK,IAAxB,EAA8B;AAC5B,0BACE;AAAQ,uBAAY,UAApB;AAA+B,QAAA,IAAI,EAAC,QAApC;AAA6C,QAAA,OAAO,EAAG,KAAKO,IAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF;AAID;AACF;;AAEDE,EAAAA,yBAAyB,CAACf,OAAD,EAAUG,UAAV,EAAsB;AAC7C,wBACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,GAAG,EAAGH,OAFR;AAGE,MAAA,QAAQ,EAAGG,UAHb;AAIE,MAAA,EAAE,EAAC,gBAJL;AAKE,MAAA,OAAO,EAAG,MAAM;AACd,aAAKM,WAAL;AACA,aAAKG,KAAL;AACD,OARH;AASE,MAAA,SAAS,EAAC,SATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWGZ,OAXH,CADF;AAcD;;AAEDgB,EAAAA,qBAAqB,CAACkD,WAAD,EAAc/D,UAAd,EAA0BgE,KAA1B,EAAiC;AACpD,wBACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,GAAG,EAAGD,WAFR;AAGE,MAAA,QAAQ,EAAG/D,UAHb;AAIE,qBAAe,gBAAegE,KAAM,EAJtC;AAKE,MAAA,OAAO,EAAG,KAAK1D,WALjB;AAME,MAAA,SAAS,EAAC,OANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQGyD,WARH,CADF;AAWD;;AAEDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEnE,MAAAA,gBAAF;AAAoBD,MAAAA,OAApB;AACJD,MAAAA,QADI;AACMD,MAAAA,QADN;AACgBI,MAAAA,IADhB;AACsBC,MAAAA,UADtB;AACkCG,MAAAA;AADlC,QACsD,KAAKT,KADjE;AAEA,WACGI,gBAAgB,CAACoE,MAAjB,GAA0B,CAA3B,gBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,qBAAY,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCvE,QAAtC,CADF,eAEE;AACE,qBAAY,eADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGGC,QAHH,CAFF,EAOIE,gBAAgB,CAACqE,OAAjB,CAAyB,CAACJ,WAAD,EAAcC,KAAd,KAAwB;AACjD,UAAID,WAAW,KAAKlE,OAApB,EAA6B;AAC3B,eAAO,KAAKe,yBAAL,CAA+Bf,OAA/B,EAAwCG,UAAxC,CAAP;AACD;;AAAC,UAAI+D,WAAW,KAAKlE,OAApB,EAA6B;AAC7B,eAAO,KAAKgB,qBAAL,CAA2BkD,WAA3B,EAAwC/D,UAAxC,EAAoDgE,KAApD,CAAP;AACD;AACF,KANC,CAPJ,EAcI7D,eAAe,IAAI,KAAKQ,gBAAL,EAdvB,EAeIZ,IAfJ,CAFF,CADF,gBAqBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAtBN;AAwBD;;AAnMgC;;AAsMnCR,IAAI,CAAC6E,SAAL,GAAiB;AACfrD,EAAAA,SAAS,EAAE7B,SAAS,CAACmF,IAAV,CAAeC,UADX;AAEfV,EAAAA,OAAO,EAAE1E,SAAS,CAACqF,KAAV,CAAgB;AACvBnC,IAAAA,IAAI,EAAElD,SAAS,CAACmF;AADO,GAAhB,EACiBC;AAHX,CAAjB;;AAMA,MAAME,kBAAkB,GAAIC,QAAD,KAAe;AACxC1D,EAAAA,SAAS,EAAGrB,KAAD,IAAW+E,QAAQ,CAACpF,QAAQ,CAACK,KAAD,CAAT;AADU,CAAf,CAA3B;;AAIA,eAAeP,OAAO,CAAC,IAAD,EAAOqF,kBAAP,CAAP,CAAkCjF,IAAlC,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../component/Header';\nimport { setScore } from '../redux/actions';\nimport store from '../redux/store';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      category: '',\n      question: '',\n      correct: '',\n      incorrectAnswers: [],\n      time: 30,\n      isDisabled: false,\n      assertions: 0,\n      questionNumber: 0,\n      isButtonVisible: false,\n    };\n\n    this.fetchApi = this.fetchApi.bind(this);\n    this.changeColor = this.changeColor.bind(this);\n    this.timer = this.timer.bind(this);\n    this.disabled = this.disabled.bind(this);\n    this.score = this.score.bind(this);\n    this.next = this.next.bind(this);\n    this.renderButtonNext = this.renderButtonNext.bind(this);\n    this.renderButtonsAlternatives = this.renderButtonsAlternatives.bind(this);\n    this.renderButtonIncorrect = this.renderButtonIncorrect.bind(this);\n  }\n\n  componentDidMount() {\n    const { saveScore } = this.props;\n    saveScore({ score: 0 });\n    this.fetchApi();\n    this.timer();\n    const { player } = store.getState().login;\n    const { name, gravatarEmail } = player;\n    const user = { player: {\n      name,\n      assertions: 0,\n      score: 0,\n      gravatarEmail,\n    } };\n    localStorage.setItem('state', JSON.stringify(user));\n  }\n\n  async fetchApi() {\n    const { questionNumber } = this.state;\n    const { token } = store.getState().login;\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = await response.json();\n    const correct = data.results[questionNumber].correct_answer;\n    const incorrect = data.results[questionNumber].incorrect_answers;\n    incorrect.push(correct);\n    incorrect.sort();\n    console.log(typeof incorrect);\n    const { category, question, difficulty } = data.results[questionNumber];\n    this.setState({\n      category,\n      question,\n      correct,\n      difficulty,\n      incorrectAnswers: [...incorrect],\n    });\n  }\n\n  changeColor() {\n    const wrongs = document.querySelectorAll('.wrong');\n    const correct = document.querySelector('.correct');\n    wrongs.forEach((element) => { element.style.border = '3px solid rgb(255, 0, 0)'; });\n    correct.style.border = '3px solid rgb(6, 240, 15)';\n    this.setState({ isButtonVisible: true });\n  }\n\n  disabled() {\n    this.setState({ isDisabled: true });\n    this.changeColor();\n  }\n\n  timer() {\n    const { time } = this.state;\n    const mil = 1000;\n    if (time !== 0) {\n      setInterval(() => {\n        this.setState((prevState) => {\n          if (prevState.time > 0) {\n            return ({ time: prevState.time - 1 });\n          } this.disabled();\n        });\n      }, mil);\n    }\n  }\n\n  score() {\n    const { saveScore } = this.props;\n    const base = 10;\n    const { difficulty, time, assertions } = this.state;\n    const actAssertion = assertions + 1;\n    this.setState({ assertions: actAssertion });\n    const levels = [0, 'easy', 'medium', 'hard'];\n    const { player } = store.getState().login;\n    const { name, gravatarEmail, score } = player;\n    const point = levels.indexOf(difficulty);\n    const points = base + (time * point);\n    const somaPoints = points + score;\n    const user = { player: {\n      name,\n      assertions: actAssertion,\n      score: somaPoints,\n      gravatarEmail,\n    } };\n    localStorage.setItem('state', JSON.stringify(user));\n    saveScore({ score: somaPoints, assertions: actAssertion });\n  }\n\n  next() {\n    const { questionNumber } = this.state;\n    const { history } = this.props;\n    const four = 4;\n    if (questionNumber < four) {\n      const actNumber = questionNumber + 1;\n      this.setState({ questionNumber: actNumber,\n        isButtonVisible: false,\n        time: 30 });\n      this.fetchApi();\n    } else if (questionNumber === four) {\n      return (history.push('/feedback'));\n    }\n  }\n\n  renderButtonNext() {\n    const { isButtonVisible } = this.state;\n    if (isButtonVisible === true) {\n      return (\n        <button data-testid=\"btn-next\" type=\"button\" onClick={ this.next }>\n          Próxima\n        </button>);\n    }\n  }\n\n  renderButtonsAlternatives(correct, isDisabled) {\n    return (\n      <button\n        type=\"button\"\n        key={ correct }\n        disabled={ isDisabled }\n        id=\"correct-answer\"\n        onClick={ () => {\n          this.changeColor();\n          this.score();\n        } }\n        className=\"correct\"\n      >\n        {correct}\n      </button>);\n  }\n\n  renderButtonIncorrect(alternative, isDisabled, index) {\n    return (\n      <button\n        type=\"button\"\n        key={ alternative }\n        disabled={ isDisabled }\n        data-testid={ `wrong-answer-${index}` }\n        onClick={ this.changeColor }\n        className=\"wrong\"\n      >\n        {alternative}\n      </button>);\n  }\n\n  render() {\n    const { incorrectAnswers, correct,\n      question, category, time, isDisabled, isButtonVisible } = this.state;\n    return (\n      (incorrectAnswers.length > 0) ? (\n        <div>\n          <Header />\n          <section>\n            <h4 data-testid=\"question-category\">{ category }</h4>\n            <h4\n              data-testid=\"question-text\"\n            >\n              {question}\n            </h4>\n            { incorrectAnswers.flatMap((alternative, index) => {\n              if (alternative === correct) {\n                return this.renderButtonsAlternatives(correct, isDisabled);\n              } if (alternative !== correct) {\n                return this.renderButtonIncorrect(alternative, isDisabled, index);\n              }\n            })}\n            { isButtonVisible && this.renderButtonNext()}\n            { time }\n          </section>\n        </div>\n      ) : <p>Loading</p>\n    );\n  }\n}\n\nGame.propTypes = {\n  saveScore: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveScore: (state) => dispatch(setScore(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}