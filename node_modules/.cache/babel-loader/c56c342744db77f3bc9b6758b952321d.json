{"ast":null,"code":"var _jsxFileName = \"/home/dh/projetos/sd-015-b-project-trivia-react-redux/src/pages/login.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport { fetchAPI, setUser } from '../redux/actions';\nimport store from '../redux/store';\nimport logo from '../trivia.png';\nimport '../App.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      isDisable: true\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRedirect = this.handleRedirect.bind(this);\n  }\n\n  async handleChange() {\n    const idName = document.getElementById('input-player-name').value;\n    const idEmail = document.getElementById('input-gravatar-email').value;\n    const emailCrypto = md5(idEmail).toString();\n    const image = await fetch(`https://www.gravatar.com/avatar/${emailCrypto}`);\n    const returnedImage = image;\n    this.setState({\n      name: idName,\n      email: 'returnedImage'\n    });\n\n    if (idName.length > 0 && idEmail.length > 0) {\n      this.setState({\n        isDisable: false\n      });\n    } else {\n      this.setState({\n        isDisable: true\n      });\n    }\n  }\n\n  async handleClick() {\n    const {\n      getToken,\n      history,\n      saveUser\n    } = this.props;\n    await getToken();\n    saveUser(this.state);\n    const {\n      token\n    } = store.getState().login;\n    localStorage.setItem('token', token);\n    history.push('/game');\n  }\n\n  handleRedirect() {\n    const {\n      history\n    } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    const {\n      isDisable\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, \"Sua vez\"), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"input-player-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, \"Nome\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      id: \"input-player-name\",\n      \"data-testid\": \"input-player-name\",\n      onKeyUp: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"input-gravatar-email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, \"Email\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      id: \"input-gravatar-email\",\n      \"data-testid\": \"input-gravatar-email\",\n      onKeyUp: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"btn-play\",\n      disabled: isDisable,\n      type: \"button\",\n      onClick: () => this.handleClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, \"Jogar\")), /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"btn-settings\",\n      type: \"button\",\n      onClick: () => this.handleRedirect(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, \"Configura\\xE7\\xE3o\")));\n  }\n\n}\n\nLogin.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  saveUser: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getToken: () => dispatch(fetchAPI()),\n  saveUser: state => dispatch(setUser(state))\n});\n\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/dh/projetos/sd-015-b-project-trivia-react-redux/src/pages/login.js"],"names":["React","PropTypes","connect","md5","fetchAPI","setUser","store","logo","Login","Component","constructor","state","name","email","isDisable","handleClick","bind","handleChange","handleRedirect","idName","document","getElementById","value","idEmail","emailCrypto","toString","image","fetch","returnedImage","setState","length","getToken","history","saveUser","props","token","getState","login","localStorage","setItem","push","render","propTypes","func","isRequired","shape","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport { fetchAPI, setUser } from '../redux/actions';\nimport store from '../redux/store';\nimport logo from '../trivia.png';\nimport '../App.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      email: '',\n      isDisable: true,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRedirect = this.handleRedirect.bind(this);\n  }\n\n  async handleChange() {\n    const idName = document.getElementById('input-player-name').value;\n    const idEmail = document.getElementById('input-gravatar-email').value;\n    const emailCrypto = md5(idEmail).toString();\n    const image = await fetch(`https://www.gravatar.com/avatar/${emailCrypto}`);\n    const returnedImage = image;\n    this.setState({\n      name: idName,\n      email: 'returnedImage',\n    });\n    if (idName.length > 0 && idEmail.length > 0) {\n      this.setState({ isDisable: false });\n    } else {\n      this.setState({ isDisable: true });\n    }\n  }\n\n  async handleClick() {\n    const { getToken, history, saveUser } = this.props;\n    await getToken();\n    saveUser(this.state);\n    const { token } = store.getState().login;\n    localStorage.setItem('token', token);\n    history.push('/game');\n  }\n\n  handleRedirect() {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    const { isDisable } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          <p>Sua vez</p>\n          <form>\n            <label htmlFor=\"input-player-name\">\n              Nome\n              <input\n                type=\"text\"\n                name=\"name\"\n                id=\"input-player-name\"\n                data-testid=\"input-player-name\"\n                onKeyUp={ this.handleChange }\n              />\n            </label>\n            <label htmlFor=\"input-gravatar-email\">\n              Email\n              <input\n                type=\"text\"\n                name=\"email\"\n                id=\"input-gravatar-email\"\n                data-testid=\"input-gravatar-email\"\n                onKeyUp={ this.handleChange }\n              />\n            </label>\n            <button\n              data-testid=\"btn-play\"\n              disabled={ isDisable }\n              type=\"button\"\n              onClick={ () => this.handleClick() }\n            >\n              Jogar\n            </button>\n          </form>\n          <button\n            data-testid=\"btn-settings\"\n            type=\"button\"\n            onClick={ () => this.handleRedirect() }\n          >\n            Configuração\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func }).isRequired,\n  saveUser: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(fetchAPI()),\n  saveUser: (state) => dispatch(setUser(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}